;-------------------------------------------------------------------------------
; File       : Q2.asm
; Function   : Evaluate characters in string return result in P2OUT
; Description: This program evaluates a string containing mathematical expressions
;			   and outputs result in P2OUT
; Input      : The input string is specified in myStr
; Output     : The port P2OUT displays the result of evaluated string
; Author     : Imaobong Nkitma
; Date       : 9/21/2020
;-------------------------------------------------------------------------------
        .cdecls C,LIST,"msp430.h"       ; Include device header file

;-------------------------------------------------------------------------------
        .def    RESET                   ; Export program entry-point to

        		.data					;updates variable in RAM memory
;result:			.int		0;			;counter for number of words in string
                                        ; make it known to linker.

myStr:  .cstring "-8-2+7"
        ; .cstring adds NULL at the end of the string;

;-------------------------------------------------------------------------------
        .text                           ; Assemble into program memory.
        .retain                         ; Override ELF conditional linking
                                        ; and retain current section.
        .retainrefs                     ; And retain any sections that have
                                        ; references to current section.

;-------------------------------------------------------------------------------
RESET:  mov.w   #__STACK_END,SP         ; Initialize stack pointer
        mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer

;-------------------------------------------------------------------------------
; Main loop here
;-------------------------------------------------------------------------------
main:   bis.b   #0FFh,&P2DIR            ; configure P2.x output
        mov.w   #myStr, R4              ; load the starting address of the string into R4
        clr.b   R5                      ; register R5 and R12 will serve as a adders
        clr.b	R12
gnext:  mov.b   @R4+, R6             	; get a new character
        cmp     #0,R6                	; is it a null character
        jeq     lend                    ; if yes, go to the end
        cmp		#'-',R6					; is it a '-'  character
        jeq		minus					; if yes go to minus
        cmp		#'+',R6					; is it a '+' character
        jeq		plus					; if yes go to plus
		add.w	R6,R5					; if neither, it is a number (in ASCII hex value), so add number to R5 (R5 = 0)
		mov.b	#'0',R8					; put hexadecimal ASCII value of 0 in R8
		sub.w	R8,R5					; R5 = R5-R8 to get actual number in digits (i.e 0-9)
		add.w	R5,R12					; add R5 to R12 (R12 is our adder)
		clr.b	R5						; reset R5 to zero
		jmp		gnext					; go to next character

minus:	mov.b	@R4+,R6					; get new character (move from arithmetic expression to digit)
		add.w	R6,R5					; R6 is now a number (in ACII hex vale), so add R6 to R5
		mov.b	#'0',R8					; put hexadecimal ASCII value of 0 in R8
		sub.w	R8,R5					; R5 = R5-R8 to get actual number in digits (i.e 0-9)
		mov.w	#0, R10					; set R10 to NULL (i.e 0x0000)
        sub.w	R5,R10					; R10 = R10 - R5 to get negative number
        add.w	R10,R12					; add R10 to R12 (R12 is our adder)
        clr.b	R5						; reset R5 to zero
        jmp		gnext					; go to next character

plus:	mov.b	@R4+,R6					; get new character (move from arithmetic expression to digit)
		add.w	R6,R5					; R6 is now a number (in ACII hex vale), so add R6 to R5
		mov.b	#'0',R8					; put hexadecimal ASCII value of 0 in R8
		sub.w	R8,R5					; R5 = R5-R8 to get actual number in digits (i.e 0-9)
		add.w	R5,R12					; add R5 to R12 (R12 is our adder)
		clr.b	R5						; reset R5 to zero
		jmp 	gnext					; go to next character



lend:   mov.b   R12, &P2OUT 			; write result in P2OUT (not visible on port pins)
        bis.w   #LPM4,SR                ; LPM4
        nop                             ; required only for Debugger


;-------------------------------------------------------------------------------
; Stack Pointer definition
;-------------------------------------------------------------------------------
        .global __STACK_END
        .sect   .stack

;-------------------------------------------------------------------------------
; Interrupt Vectors
;-------------------------------------------------------------------------------
         .sect   ".reset"               ; MSP430 RESET Vector
         .short  RESET
         .end
