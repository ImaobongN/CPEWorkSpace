/*------------------------------------------------------------------------------
 *
 * Instruction: Set the following parameters in hyperterminal
 * Port:        COM5
 * Baud rate:   115200
 * Data bits:   8
 * Parity:      None
 * Stop bits:   1
 * Flow Ctrl:   None
 */
#include <msp430.h>
#include <math.h>

//#define S1 P2IN&BIT1;
volatile long int ADCXval, ADCYval, ADCZval;
volatile float gX, gY, gZ, netG, pow_netG;

void TimerA_setup(void)
{
    TA0CCTL0 = CCIE;                     // Enabled interrupt
    TA0CCR0 = 3277;                      // 3277 / 32768 Hz = 0.1s
    TA0CTL = TASSEL_1 + MC_1;            // ACLK, up mode
}

void ADC_setup(void)
{
    // configure ADC converter
    P6SEL = 0x07;                             // Enable A/D channel inputs
    ADC12CTL0 = ADC12ON+ADC12MSC+ADC12SHT0_8; // Turn on ADC12, extend sampling time
                                              // to avoid overflow of results

    ADC12CTL1 = ADC12SHP+ADC12CONSEQ_1;       // Use sampling timer, repeated sequence
    ADC12MCTL0 = ADC12INCH_0;                 // ref+=AVcc, channel = A0
    ADC12MCTL1 = ADC12INCH_1;                 // ref+=AVcc, channel = A1,
    ADC12MCTL2 = ADC12INCH_2+ADC12EOS;        // ref+=AVcc, channe1 = A2, end seq.

    ADC12IE = 0x04;                           // Enable ADC12IFG.1
    ADC12CTL0 |= ADC12ENC;                    // Enable conversions
}

void UART_putCharacter(char c)
{
    while (!(UCA0IFG&UCTXIFG));    // Wait for previous character to transmit
    UCA0TXBUF = c;                  // Put character into tx buffer
}


void UART_setup(void)
{
    P3SEL |= BIT3 + BIT4;   // Set USCI_A0 RXD/TXD to receive/transmit data

        UCA0CTL1 |= UCSWRST;    // Set software reset during initialization
        UCA0CTL0 = 0;           // USCI_A0 control register
        UCA0CTL1 |= UCSSEL_2;   // Clock source SMCLK

        UCA0BR0 = 0x09;         // 1048576 Hz  / 115200 lower byte
        UCA0BR1 = 0x00;         // upper byte
        UCA0MCTL |= UCBRS0;     // Modulation (UCBRS0=0x01, UCOS16=0)

        UCA0CTL1 &= ~UCSWRST;   // Clear software reset to initialize USCI state machine
}

void sendData(void)
{
    int i;
    gX = ((ADCXval*3.0/4095)-1.5)/0.3;    // Calculate acceleration outputs
    gY = ((ADCYval*3.0/4095)-1.5)/0.3;
    gZ = ((ADCZval*3.0/4095)-1.5)/0.3;

    // Use character pointers to send one byte at a time
    char *xpointer=(char *)&gX;
    char *ypointer=(char *)&gY;
    char *zpointer=(char *)&gZ;

    UART_putCharacter(0x55);            // Send header
    for(i = 0; i < 4; i++)
    {            // Send x value - one byte at a time
        UART_putCharacter(xpointer[i]);
    }
    for(i = 0; i < 4; i++)
    {            // Send y value - one byte at a time
        UART_putCharacter(ypointer[i]);
    }
    for(i = 0; i < 4; i++)
    {            // Send z value - one byte at a time
        UART_putCharacter(zpointer[i]);
    }

    pow_netG = pow(gX,2) + pow(gY,2) + pow(gZ,2);
    netG = pow(pow_netG,0.5);
}


void main(void)
{

    WDTCTL = WDT_ADLY_1000;           // 1 s interval timer


    P1DIR |= BIT0;                    // Set P1.0 to output direction
    P4DIR |= BIT7;                    // Set P1.0 to output direction
    P2DIR &= ~BIT1;                   // set P2.1 as input (SW1)
    P2OUT |= BIT1;                       // Required for proper IO
    P2REN |= BIT1;                       // enable pull-up resistor

    SFRIE1 |= WDTIE;                // Enable WDT interrupt
    __enable_interrupt();

    ADC_setup();                        // Setup ADC
    UART_setup();
    TimerA_setup();

    while (1)
    {
        __bis_SR_register(LPM0_bits + GIE); // Enter LPM0
        sendData();
    }
}

#pragma vector = ADC12_VECTOR
__interrupt void ADC12ISR(void)
{
    ADCXval = ADC12MEM0;                  // Move results, IFG is cleared
    ADCYval = ADC12MEM1;
    ADCZval = ADC12MEM2;
    __bic_SR_register_on_exit(LPM0_bits); // Exit LPM0
}

#pragma vector = TIMER0_A0_VECTOR
__interrupt void timerA_isr()
{
    ADC12CTL0 |= ADC12SC;
}

#pragma vector=WDT_VECTOR
__interrupt void watchdog_timer(void)
{
    P4OUT |= BIT7;
    if(netG == 2)
    {
        P1OUT ^= BIT0;                    // Toggle P1.0
        P4OUT ^= BIT7;

        if(P2IN&BIT1 == 0)
        {
            P1OUT &= ~BIT0;
            P4OUT &= ~BIT7;
        }
    }

    else{
        P2OUT &= ~BIT1;
        P4OUT &= ~BIT7;
    }
}
